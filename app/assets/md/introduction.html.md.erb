# Introduction

<div class="alert alert-info">
  <span class="label label-primary">Note:</span> This document describes Bud's architecture.
  Use <a href="<%= pages_path('docs/guide') %>">the guide</a>
  if you want to start using Bud without going into nitty-gritty details.
</div>

Bud is a build tool. It takes care of your C# projects. Bud is all about automating
build-related processes. For example, Bud will fetch the dependencies of your projects,
build the projects, run, test, package, and publish them for you. You can also customise
your processes through normal C# code.

In the simplest case, you don't have to configure Bud at all. Just place
some C# files in the `Your.Project/src/main/cs` folder and invoke `bud run`.

Bud's configuration is written in C#. No XMLs or DSLs, just a plain C# file:
`Your.Project/.bud/Build.cs`. In this file you can
specify multiple projects, their dependencies, and add other customisations
to the build process.


## Concepts


### The `Build` class

Bud expects to find a class called `Build` in your `Your.Project/.bud/Build.cs` file.
This class must implement the `Bud.IBuild` interface:

```language-csharp
<%= snippet('bud/Core/src/main/cs/IBuild.cs') %>
```

Here's an example of a `Build.cs` file:

```language-csharp
<%= snippet('bud/SystemTests/src/test/budProjects/ProjectWithTests/.bud/Build.cs') %>
```

The example above defines an executable project `A` in folder `A`. 
You can now place some C# files into the `A/src/main/cs` folder and then invoke
`bud run`. This will compile your C# files, create the `A.exe` executable, and
run it.

Note that you can also place C# sources into `.bud/src/main/cs` and Bud
will compile them together with the `.bud/Build.cs` file into the same assembly
named `Build.dll`. This is possible because the `.bud` is just another Bud project.


### The `Settings` class

You define the build by calling `Add` methods on a `Settings` instance.
For example, you add projects to the build by calling
`settings.Add(new Project(...))`. In fact, adding a project generates a whole bunch of
much smaller calls to `settings.Add(...)` each of which adds a __modifier__ to a list 
of modifiers in settings. There are two types of modifiers: one that introduces and
initialises a key-value pair, and another that modifies an existing key-value pair.
Bud applies these modifiers one after the other. This results in a list of key-value
pairs, called __build definition__.


### Build definition

A __build definition__ is a collection of key-value pairs. There are two types of keys: `ConfigKey` and
`TaskKey`. Every key has a path, such as `/project/Foo.Bar/main/cs/baseDir` or
`/build`. A value can be of any .NET type.

A value of a config key is evaluated when it is accessed for the first time. It is evaluated
once per lifetime of the build definition. A value of a task key is evaluated once per root-level task
invocation (i.e.: if a task calls another task twice, its value is evaluated once only and in the second
invocation the cached value is used).

You define values of config keys and task keys by building them up (i.e., you add small modifiers to a
`Settings` instance). For example, you can introduce your own key and value by calling
`settings.Add(MySettings.HelloWorldMessage.Init("Hello, World!"))`. The parameter to the
`Add` method is a modifier. This modifier initialises the
`HelloWorldMessage`
key with the value `"Hello, World!"` (but only if it has not been initialised before in this
particular `settings` instance).
You can define your own config and task keys like this:

```language-csharp
public static readonly ConfigKey<string> HelloWorldMessage = Key.Define("helloWorldMessage", "Prints a hello world message in the log.");

public static readonly TaskKey HelloWorld = Key.Define("helloWorld", "Prints a hello world message in the log.");
```

<div class="alert alert-info">
  <span class="label label-primary">Note:</span> The <code>Settings</code> class is immutable. Therefore,
  <code>settings.Add(...)</code> returns
  a new instance instead of mutating the existing one.
</div>