# Outline

<div class="alert alert-info">
  <span class="label label-primary">Note:</span> This document describes Bud's architecture.
  Use <a href="/Docs/Guide">the guide</a>
  if you want to start using Bud without going into nitty-gritty details.
</div>

Bud is a build tool. It builds your C# projects and automates many build-related processes.
For example, Bud will fetch the dependencies of your projects,
build the projects, run, test, package, and publish them.

Bud is highly customisable. All its configuration is written in pure C#.
No XMLs or DSLs, just a plain C# file: `My.Project/.bud/Build.cs`. In this file you can
specify your projects, their dependencies, and add other customisations
to the build process. Adding a new custom build tasks is therefore as easy as
writing a function in C#.

In the simplest case, you don't have to configure Bud at all. Just place
some C# files in the `My.Project/src/main/cs` folder and invoke `bud run`
in the `My.Project` folder.


## Concepts


### The `Build.cs` file and the `Build` class

Bud expects to find a class called `Build` in your `My.Project/.bud/Build.cs` file.
This class must implement the `Bud.IBuild` interface:

```language-csharp
<%= snippet('bud/Core/src/main/cs/IBuild.cs') %>
```

Note that you can also place C# sources into `.bud/src/main/cs` and Bud
will compile them together with `.bud/Build.cs` into `.bud/Build.dll`. This
is possible because the `.bud` is itself a C# project. Here's an example
of a `Build.cs` file:

```language-csharp
<%= snippet('bud/SystemTests/src/test/budProjects/SimpleProjectTest/.bud/Build.cs') %>
```

The example above defines an executable project, named `Foo`.
C# files in `src/main/cs` will belong to this project. When you invoke
`bud run`, Bud will compile these C# files, create the `Foo.exe` executable, and
run it.


### The `Settings` class

You define the build by calling `Add` methods on a `Settings` instance.
For example, you add projects to the build by calling
`settings.Add(new Project(...))`. In fact, adding a project generates a whole bunch of
much smaller calls to `settings.Add(...)` each of which adds a __modifier__.
There are two types of modifiers: one that introduces and
initialises a key-value pair, and another that modifies the value of an existing
key-value pair. At the end, settings will contain a bunch of modifiers. Bud will
merge these modifiers by applying them one after the other. The result is a list
of key-value pairs, called __build definition__.

<div class="alert alert-info">
  <span class="label label-primary">Note:</span> The <code>Settings</code> class is immutable. Therefore,
  <code>settings.Add(...)</code> returns a new instance instead of mutating the existing one.
</div>


### Build definition

A __build definition__ is a collection of key-value pairs. It contains two types of
keys: `ConfigKey` and `TaskKey`. Every key has a _path_, such as `/project/Foo.Bar/main/cs/baseDir` or
`/build`. A value can be of any .NET type.

A value of a config key is evaluated when it is accessed for the first time. It is evaluated
once per lifetime of the build definition. A value of a task key is evaluated once per root-level task
invocation (i.e.: if a task calls another task twice, its value is evaluated once, this value is cached
and hence the cached value is used for every other invocation).

### Customising the build

You can write your own tasks and configurations either directly in the `.bud/Build.cs` file or in sources
within `.bud/src/main/cs`. The recommended way to create new build customisations is to write a Bud plugin.
Here's en example of a plugin:

```language-csharp
<%= snippet('bud/Examples/Bud.Examples.HelloWorldPlugin/src/main/cs/HelloWorldPlugin.cs') %>

```

To use the plugin in the build, simply call `settings.Add(new HelloWorldPlugin())` in your `Build` class.